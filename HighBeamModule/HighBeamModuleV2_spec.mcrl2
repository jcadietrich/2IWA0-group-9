sort OnOffLights	= struct On | Off | Auto;
sort keystate		= struct NoKey | Inserted | Ignition;
sort pitman			= struct Push | Flash | Neutral;
sort HighLow		= struct High | Low;
sort State			= struct Idle|Check;

act 
%Internal actions
	%pitman arm communication
		pitS				:pitman;
		pitR				:pitman;
		com_scs2bcf			:pitman;
	%highbeam communication	
		highR      			:OnOffLights;
   		highS				:OnOffLights;
		rearhighR			:OnOffLights;
		com_bcf2hb_high 	:OnOffLights;
		com_hr2hb			:OnOffLights;
	%lowbeam communication
		lowR				:OnOffLights;
		lowS				:OnOffLights;
		rearlowR			:OnOffLights;
		com_bcf2hb_low		:OnOffLights;
	%ignition communication
		keyS				:keystate;
		keyR				:keystate;
		com_ign2bcf			:keystate;
	%exterior lamp switch communication
		elsS				:OnOffLights;
		elsR				:OnOffLights;
		com_els2bcf			:OnOffLights;
	%control priorities
		com_controlling		:State;
		stateR				:State;
		stateS				:State;
		stateRF				:State;
		state4				:State;
		state5				:State;
		state6				:State;
	%tail communication
		TailS				:OnOffLights;
		TailR				:OnOffLights;
		com_tail			:OnOffLights;

	
%External actions
	LowBeam	   				:OnOffLights;
	HighBeam   				:OnOffLights;
	TailLight				:OnOffLights;
	KeyState				:keystate;
	PitmanArm				:pitman;
	ExtLampSwitch			:OnOffLights;
	DRL						:OnOffLights;
	Brightness				:HighLow;
	

%process			
proc BodyControllerFront(high:OnOffLights, low:OnOffLights,key:keystate,pit:pitman,els:OnOffLights,bs:HighLow,drl:OnOffLights,state:State,Tail:OnOffLights) =
	%DRL
		(state==Idle)->(drl == On)	->DRL(Off)			. BodyControllerFront(drl=Off,state=Check)
	+	(state==Idle)->(drl == Off)->DRL(On)			. BodyControllerFront(drl=On,state=Check)

	%Brightness sensor
	+	(state==Idle)->(bs == Low)->Brightness(High)	. BodyControllerFront(bs=High,state=Check)
	+	(state==Idle)->(bs != Low)->Brightness(Low)	. BodyControllerFront(bs=Low,state=Check)	


	%Receiving communication 
	+	sum newkey:keystate  .(state!=Check)-> keyR(newkey) . BodyControllerFront(key=newkey,state=Check)
	+   sum newpit:pitman   . (state==Idle)->pitR(newpit) . BodyControllerFront(pit=newpit,state=Check)
	+	sum newels:OnOffLights .(state==Idle)-> elsR(newels) .BodyControllerFront(els=newels,state=Check)
	+ 	sum newstate:State	. stateRF(newstate)	. BodyControllerFront(state = newstate)

	%logic and sending communication
	+ 	(key != NoKey && ((els == On && pit == Push) || ( pit == Flash)))	->(highS(On). BodyControllerFront(high=On)) 
			<> 
			((high!=Off)->(highS(Off)	. BodyControllerFront(high = Off,state = Idle))<>(stateRF(Idle).BodyControllerFront(state=Idle)))
	+	(key != NoKey && ( els == On ||(els == Auto  &&     bs==Low)))		->(lowS(On) . BodyControllerFront(low=On)) 
			<> 
			((low!=Off)->(lowS(Off)  . BodyControllerFront(low=Off,state=Idle))<>(stateRF(Idle). BodyControllerFront(state=Idle)))
	+	(high == On||low==On) -> (TailS(On). BodyControllerFront(Tail=On))<>( TailS(Off).BodyControllerFront(Tail=Off))	
		
;

proc HighBeamModule(high:OnOffLights, low:OnOffLights,state:State) =
		sum newhigh:OnOffLights  . 	(highR(newhigh)	.	(HighBeam(newhigh) .stateS(Idle). HighBeamModule(high=newhigh)))%<>(stateS(Idle).HighBeamModule())
	+	sum newlow:OnOffLights 	 . (lowR(newlow) 	.	(LowBeam(newlow)   .stateS(Idle). HighBeamModule(low=newlow))) %<>(stateS(Idle).HighBeamModule())
	+ 	sum newstate:State	. stateS(newstate)	. HighBeamModule(state = newstate)
	%	sum newhigh:OnOffLights  . (high != newhigh)	-> 	(highR(newhigh)	.	(HighBeam(newhigh) .stateS(Idle). HighBeamModule(high=newhigh)))%<>(stateS(Idle).HighBeamModule())
	%+	sum newlow:OnOffLights 	 . (low != newlow) 		->(	lowR(newlow) 	.	(LowBeam(newlow)   .stateS(Idle). HighBeamModule(low=newlow))) %<>(stateS(Idle).HighBeamModule())
%+	sum newhigh:OnOffLights  . (high != newhigh)	-> stateS(Idle).HighBeamModule()

;

proc BodyControllerRear(Tail:OnOffLights,state:State) =
		sum newtail:OnOffLights . TailR(newtail)	. 	TailLight(newtail) 	.stateS(Idle). BodyControllerRear(Tail = newtail)  		
	+ 	sum newstate:State	. stateS(newstate)	. BodyControllerRear(state = newstate)
;

proc IgnitionSwitch(key:keystate) =
	
		(key != Inserted)->KeyState(Inserted) 		. keyS(Inserted) 	. IgnitionSwitch(key=Inserted)
	+	(key == Inserted)->KeyState(Ignition) 		. keyS(Ignition)	. IgnitionSwitch(key=Ignition)
	+	(key == Inserted)->KeyState(NoKey)	  		. keyS(NoKey)		. IgnitionSwitch(key=NoKey)


;

proc SteeringColumnSwitch(pit:pitman) = 
		(pit != Neutral)	-> PitmanArm(Neutral)	. pitS(Neutral)		.SteeringColumnSwitch(pit=Neutral)
	+	(pit == Neutral)	-> PitmanArm(Flash)		. pitS(Flash)		.SteeringColumnSwitch(pit=Flash)
	+	(pit == Neutral)	-> PitmanArm(Push)		. pitS(Push)		.SteeringColumnSwitch(pit=Push)

;
proc ExternalLampSwitch(els:OnOffLights,state:State) = 
		(els != On && state == Idle)->ExtLampSwitch(On)  .elsS(On)	. ExternalLampSwitch(els=On)
	+	(els == On && state == Idle)->ExtLampSwitch(Off) .elsS(Off)	. ExternalLampSwitch(els=Off)
	+	(els == On && state == Idle)->ExtLampSwitch(Auto).elsS(Auto)	. ExternalLampSwitch(els=Auto)
	+	sum newstate:State	. stateR(newstate)	.ExternalLampSwitch(state=newstate)
		
;

%init HighBeamModule(Off,Off);
init 		allow ({com_bcf2hb_high,com_bcf2hb_low,com_ign2bcf,com_scs2bcf,com_els2bcf,com_controlling,
					LowBeam,HighBeam,TailLight,ExtLampSwitch,KeyState,PitmanArm,DRL,Brightness
					} ,
				comm({
					highS|	highR 					-> com_bcf2hb_high, 
					lowS |	lowR   					-> com_bcf2hb_low,
					keyS		   |keyR 			-> com_ign2bcf,
					pitS		   |pitR			-> com_scs2bcf,
					elsS		   |elsR			-> com_els2bcf,
					TailS			|TailR			-> com_tail,
					stateS|stateR|stateRF			-> com_controlling
				}, 
			BodyControllerFront(Off,Off,NoKey, Neutral,Off,High,Off,Idle,Off)||
			HighBeamModule(Off,Off,Idle)||
			IgnitionSwitch(NoKey)||
			BodyControllerRear(Off,Idle)||
			SteeringColumnSwitch(Neutral)||
			ExternalLampSwitch(Off,Idle)
			));