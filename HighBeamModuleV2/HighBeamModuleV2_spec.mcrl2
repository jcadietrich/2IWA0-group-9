sort OnOffLights	= struct On | Off;
sort keystate		= struct NoKey | Inserted | Ignition;

act 
%Internal actions
	in_HighBeam	:OnOffLights;
 	in_LowBeam 	:OnOffLights;
    out_FBC_high:OnOffLights;
	out_FBC_low	:OnOffLights;
	highR      	:OnOffLights;
	lowR		:OnOffLights;
	com_fbc2hb_high :OnOffLights;
	com_fbc2hb_low	:OnOffLights;

%External actions
	LowBeam	   	:OnOffLights;
	HighBeam   	:OnOffLights;
	KeyState	:keystate;

%Change variables
	

%process
proc HighBeamModule(high:OnOffLights, low:OnOffLights) =
	sum nh:OnOffLights  . (high != nh)-> 	highR(nh).	(HighBeam(nh) . HighBeamModule(high=nh))
+	sum nl:OnOffLights 	. (low != nl) ->	lowR(nl) .	(LowBeam(nl)  . HighBeamModule(low=nl))

;


			
proc BodyControllerFront(high:OnOffLights, low:OnOffLights,key:keystate) =
		(key == NoKey)->out_FBC_high(On)  . BodyControllerFront(On,low,key)
	+	(key == NoKey)->out_FBC_high(Off)   . BodyControllerFront(Off,low,key)
	+	(key == NoKey)->out_FBC_low(Off)  . BodyControllerFront(high,On,key)
	+	(key == NoKey)->out_FBC_low(On) . BodyControllerFront(high,Off,key)
;
%init HighBeamModule(Off,Off);
init 	hide({out_FBC_high,highR},allow ({com_fbc2hb_high,com_fbc2hb_low,LowBeam,HighBeam} ,
			comm({out_FBC_high|highR -> com_fbc2hb_high, 
			out_FBC_low|lowR -> com_fbc2hb_low}, 
			BodyControllerFront(Off,Off,NoKey)||HighBeamModule(Off,Off))));

